/* tslint:disable */
/* eslint-disable */
/**
 * What Am I
 * .
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface IGetUsageResponseDTO
 */
export interface IGetUsageResponseDTO {
    /**
     * 
     * @type {IUsageItemDTO}
     * @memberof IGetUsageResponseDTO
     */
    'usageList': IUsageItemDTO;
}
/**
 * A datapoint to describe the usage of a particular item.
 * @export
 * @interface IUsageItemDTO
 */
export interface IUsageItemDTO {
    /**
     * 
     * @type {string}
     * @memberof IUsageItemDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof IUsageItemDTO
     */
    'startTime'?: number;
    /**
     * 
     * @type {number}
     * @memberof IUsageItemDTO
     */
    'endTime'?: number;
}

/**
 * UsageApi - axios parameter creator
 * @export
 */
export const UsageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the usage information for software on the pc within a time range.
         * @param {number} [startTime] The start time of the usage data in unix epoch seconds.
         * @param {number} [endTime] The end time of the usage data in unix epoch seconds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPCUsage: async (startTime?: number, endTime?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usage/pc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsageApi - functional programming interface
 * @export
 */
export const UsageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsageApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the usage information for software on the pc within a time range.
         * @param {number} [startTime] The start time of the usage data in unix epoch seconds.
         * @param {number} [endTime] The end time of the usage data in unix epoch seconds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPCUsage(startTime?: number, endTime?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IGetUsageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPCUsage(startTime, endTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsageApi.getPCUsage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsageApi - factory interface
 * @export
 */
export const UsageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsageApiFp(configuration)
    return {
        /**
         * Get the usage information for software on the pc within a time range.
         * @param {number} [startTime] The start time of the usage data in unix epoch seconds.
         * @param {number} [endTime] The end time of the usage data in unix epoch seconds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPCUsage(startTime?: number, endTime?: number, options?: RawAxiosRequestConfig): AxiosPromise<IGetUsageResponseDTO> {
            return localVarFp.getPCUsage(startTime, endTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsageApi - object-oriented interface
 * @export
 * @class UsageApi
 * @extends {BaseAPI}
 */
export class UsageApi extends BaseAPI {
    /**
     * Get the usage information for software on the pc within a time range.
     * @param {number} [startTime] The start time of the usage data in unix epoch seconds.
     * @param {number} [endTime] The end time of the usage data in unix epoch seconds.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    public getPCUsage(startTime?: number, endTime?: number, options?: RawAxiosRequestConfig) {
        return UsageApiFp(this.configuration).getPCUsage(startTime, endTime, options).then((request) => request(this.axios, this.basePath));
    }
}



