/*
What Am I

.

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IGetUsageResponseDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IGetUsageResponseDTO{}

// IGetUsageResponseDTO struct for IGetUsageResponseDTO
type IGetUsageResponseDTO struct {
	UsageList IUsageItemDTO `json:"usageList"`
}

type _IGetUsageResponseDTO IGetUsageResponseDTO

// NewIGetUsageResponseDTO instantiates a new IGetUsageResponseDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIGetUsageResponseDTO(usageList IUsageItemDTO) *IGetUsageResponseDTO {
	this := IGetUsageResponseDTO{}
	this.UsageList = usageList
	return &this
}

// NewIGetUsageResponseDTOWithDefaults instantiates a new IGetUsageResponseDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIGetUsageResponseDTOWithDefaults() *IGetUsageResponseDTO {
	this := IGetUsageResponseDTO{}
	return &this
}

// GetUsageList returns the UsageList field value
func (o *IGetUsageResponseDTO) GetUsageList() IUsageItemDTO {
	if o == nil {
		var ret IUsageItemDTO
		return ret
	}

	return o.UsageList
}

// GetUsageListOk returns a tuple with the UsageList field value
// and a boolean to check if the value has been set.
func (o *IGetUsageResponseDTO) GetUsageListOk() (*IUsageItemDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsageList, true
}

// SetUsageList sets field value
func (o *IGetUsageResponseDTO) SetUsageList(v IUsageItemDTO) {
	o.UsageList = v
}

func (o IGetUsageResponseDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IGetUsageResponseDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["usageList"] = o.UsageList
	return toSerialize, nil
}

func (o *IGetUsageResponseDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"usageList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIGetUsageResponseDTO := _IGetUsageResponseDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIGetUsageResponseDTO)

	if err != nil {
		return err
	}

	*o = IGetUsageResponseDTO(varIGetUsageResponseDTO)

	return err
}

type NullableIGetUsageResponseDTO struct {
	value *IGetUsageResponseDTO
	isSet bool
}

func (v NullableIGetUsageResponseDTO) Get() *IGetUsageResponseDTO {
	return v.value
}

func (v *NullableIGetUsageResponseDTO) Set(val *IGetUsageResponseDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIGetUsageResponseDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIGetUsageResponseDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIGetUsageResponseDTO(val *IGetUsageResponseDTO) *NullableIGetUsageResponseDTO {
	return &NullableIGetUsageResponseDTO{value: val, isSet: true}
}

func (v NullableIGetUsageResponseDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIGetUsageResponseDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


